Docker

What is docker?
Docker is a container technology: A tool for creating and managing containers
Container: A standardized unit of software. A package of code and dependencies to run that code(Java Code +JDK)
Advantage of container:
The same contianer yields the exact same application and execution behaviour!
No matter where or by whom it is executed
Docker simplifies the creation and management of the containers

Why Docker and container?
Docker packages software into standardized units called containers that have everything the software needs to run including libraries,
system tools, code, and runtime. Using Docker, you can quickly deploy and scale applications into any environment and know your 
code will run. 
Docker containers, unlike virtual machines, provide: Abstraction at the operating system level with optimized resource usage

Example:
In dev environment if we have built a java based app which uses JDK 1.8 Version which has lambda functions and streams
suppose if production env has java JDK 1.7 version the after this app to prod it fails and throw error
So what if deploy our app along with JDK 1.8 that's where docker comes in
Docker Container is idependent from the host OS
It has a bare minimum OS and we can add our app and JDK 1.8 and we can deoploy this container to prod

Virtual Machines vs Docker?
Find the VM Architecture here: VM-Architecture.png
Find VM vs Docker Architecture here: VM-vs-Docker_Architecture.png
1.Virtualization
->Both virtual machines and Docker containers provide isolated environments to run applications. 
	The key difference between the two is in how they facilitate this isolation.
->VM boots up its own guest OS. Therefore, it virtualizes both the operating system kernel and the application layer.
	A Docker container virtualizes only the application layer, and runs on top of the host operating system.
Check the image here:

2.Compatibility
->A virtual machine uses its own operating system and is independent of the host operating system that it’s running on.  
	Therefore, a VM is compatible with all operating systems.
->A Docker container, on the other hand, is compatible with any Linux distribution. 
	You may run into some problems running Docker on a Windows machine or an older Mac.
	
3.SIZE
->A VM instance can be as large as a few gigabytes or even terabytes.
->A Docker image is lightweight and is typically in the order of kilobytes.
  A Docker image denotes the artifact containing the application, its associated dependencies, and configuration. 
  A running instance of the Docker image is called a container.

4.Performance
->Starting a VM is equivalent to setting up a standalone machine inside your computer. 
	It can take as long as a few minutes to start a VM instance.
->In terms of performance, Docker containers provide near-native performance. 
	Because they are lightweight, you can start them in a few milliseconds.
->In the case of a virtual machine, resources like CPU, memory, and I/O may not be allocated permanently to containers 
	— unlike in the case of a Docker container, where the resource usage works with the load or traffic. 

5.Security
->Docker containers run on top of the host operating system. Therefore, if the host OS is susceptible to security vulnerabilities, 
	so are the Docker containers.
->Virtual machines, on the other hand, boot up their own operating system, and are more secure. 
	Recall: each virtual machine is a fully blown machine running inside another. 
	If you have stringent security constraints to be met for sensitive applications, you should consider using a virtual machine instead.

6.Replicability
->The next factor we'll consider is the ease with which you can replicate the isolated environments provided by VMs and containers. 
	We can infer the ease of replicability from our earlier discussions on size and performance.
->When there are multiple applications, each of which should run on a VM instance, using VMs can be inefficient and resource intensive. 
  Docker containers, by virtue of being lightweight and performant, are preferred when you need to run multiple applications
  
Docker Hub:
Docker Hub is a registry service on the cloud that allows you to download Docker images that are built by other communities. 
You can also upload your own Docker built images to Docker hub. 
Link: https://hub.docker.com/

Docker Images:
In Docker, everything is based on Images. An image is a combination of a file system and parameters. 

Docker Commnds:

1.Docker Image Commands:
->Pull A Image from docker hub: docker pull hell-world
->Display all images: docker images
	TAG − This is used to logically tag images.
    Image ID − This is used to uniquely identify the image.
    Created − The number of days since the image was created.
    Virtual Size − The size of the image.
->Downloading Docker Images from hub and running: docker run hell-world  (this will download the image and run it which will create a container)
->Run a Image: 
	docker run image-name or image-id
	when we do a docker run the docker engine creats a container of the images by taking the parmeters
	after the run command
->To expose contianer port to host port: docker run -p hostPort:containerport imageName or imageId
->To give a custom name to container: docker run --name=containerName -d imageName or imageId
->Pull a docker image of ubuntu: docker pull ubuntu
->Enter into linux shell of ubuntu docker container (Interactive mode): docker run -it ubuntu /bin/bash
->leave from linux shell of ubuntu docker container: exit
->Remove docker image: docker rmi image-name or imageId
->Remove docker image forcefully: docker rmi -f image-name or imageId
->Return only the Image ID’s of the images: docker images -q
->To See the metadata of a image: docker inspect image-name

2.Docker Container commands:
->List Currently running Docker containers: docker ps
->List all docker containers: docker ps -a
->return all the commands that were run with an image via a container: docker history imageId
->Stop a running container: docker stop ContainerID 
->Start a stopped container: docker start -a ContainerID 
->To check logs: docker logs containerID
->Remove a container: docker rm ContainerID
->Provide the statistics of a running container: docker stats ContainerID
->pause the processes in a running container: docker pause ContainerID 
->unpause the processes in a running container: docker unpause ContainerID
->kill the processes in a running container: docker kill ContainerID 
->Enter into shell of a container: Ubunutu : docker exec -it imageId /bin/bash  
									Alpine: docker exec -it imageId /bin/sh
Find the docker container life cycle here: Docker-Container-LifeCycle.png

-> Docker also gives you the capability to create your own Docker images, and it can be done with the help of Docker Files.
A Docker File is a simple text file with instructions on how to build your images.

=>Building a custom docker image
To Build a docker image we need a file named Dockerfile which has the instructions to create a image

Example Dockerfile:
#This is a sample Image 
FROM ubuntu 
MAINTAINER demousr@gmail.com 
RUN apt-get update 
RUN apt-get install –y nginx 
CMD [“echo”,”Image created”] 

->The first line "#This is a sample Image" is a comment. You can add comments to the Docker File with the help of the # command
->The next line has to start with the FROM keyword. It tells docker, from which base image you want to base your image from. 
	In our example, we are creating an image from the ubuntu image.
->The next command is the person who is going to maintain this image. 
	Here you specify the MAINTAINER keyword and just mention the email ID.
->The RUN command is used to run instructions against the image. 
	In our case, we first update our Ubuntu system and then install the nginx server on our ubuntu image.
->The last command is used to display a message to the user.

Build a docker image cmd: docker build -t ImageName:TagName dir
-t − is to mention a tag to the image
ImageName − This is the name you want to give to your image.
TagName − This is the tag you want to give to your image.
Dir − The directory where the Docker File is present.

Example: docker build –t myimage:0.1 . 
Since the Docker File is in the present working directory, we used "." at the end of the command to signify the present working directory.

Push owr own docker images to docker hub Steps: https://www.tutorialspoint.com/docker/docker_public_repositories.htm

Docker file insturctions:
Docker has a host of instruction commands. These are commands that are put in the Docker File. Let’s look at the ones which are available.

1.FROM
This command is used to tell docker, which base image to use to build your image.
Syntax: FROM imageName
Example:
FROM ubuntu 
CMD [“echo” , “hello world”] 

2.RUN
RUN command is used to run instructions against the image, Executes command in a new image layer
RUN Command gets executed when building the image
Syntax: RUN command
RUN <command> (shell form, the command is run in a shell, which by default is /bin/sh -c on Linux or cmd /S /C on Windows)
RUN ["<executable>", "<param1>", "<param2>"] (exec form)
Example
FROM ubuntu 
RUN apt-get update 

3.MAINTAINER
The MAINTAINER instruction allows you to set the Author field of the generated images.
Syntax: MAINTAINER <name>

4.CMD
this command is used to execute a command at runtime when the container is executed.
Command to be executed when running a container. It is asked to have one CMD command, 
If a Dockerfile has multiple CMDs, it only applies the instructions from the last one.
you cannot add more params to the CMD when running the docker container
Syntax - CMD command param1 
command − This is the command to run when the container is launched.
param1 − This is the parameter entered to the command.
Example:
FROM ubuntu 
CMD [“echo” , “hello world”] 
when we build the docker image and after creating the container it will run the echo command and prints "hello world"

5.ENTRYPOINT
This command can also be used to execute commands at runtime for the container. But we can be more flexible with the ENTRYPOINT command.
you can add more params to the CMD when running the docker container
Syntax - ENTRYPOINT command param1 
command − This is the command to run when the container is launched.
param1 − This is the parameter entered into the command.
Example:
FROM ubuntu 
ENTRYPOINT [“echo”]

-> Build the image docker build -t example:2 .
-> Create the container from image : docker run sample Hello World
->Output: Hello World (what ever arguments we give in the run command it will be picked up by ENTRYPOINT and echo cmd is executed) 

6.ENV
This command is used to set environment variables in the container.
Syntax: ENV key value
Key − This is the key for the environment variable.
value − This is the value for the environment variable.
Example:
FROM ubuntu 
ENV firstName=Shushanth lastName=Belugula
after building the image to check the env variables run the below cmd
docker run -it imageName /bin/bash
env

7.WORKDIR
This command is used to set the working directory of the container.
Syntax: WORKDIR dirname  
dirname − The new working directory. If the directory does not exist, it will be added.
FROM ubuntu
WORKDIR /newtemp 
CMD pwd

8.EXPOSE
Documents which ports are exposed (It is only used for documentation)

9.COPY
It is used to copy your local files/directories to Docker Container.

10.ADD
It is more feature-rich version of the COPY instruction. COPY is preferred over ADD. 
Major difference b/w ADD and COPY is that ADD allows you to copy from URL that is the source
 can be URL but in COPY it can only have local ones.
 
11.VOLUME 
It defines which directory in an image should be treated as a volume. 
The volume will be given a random name which can be found using docker inspect command.


Difference between RUN,CMD and ENTRYPOINT?
->RUN instruction allows you to install your application and packages required for it. 
It executes any commands on top of the current image and creates a new layer by committing the results. 
Often you will find multiple RUN instructions in a Dockerfile.RUN will be executed when creating an image
Example: RUN apt-get install default-jdk
->CMD instruction allows you to set a default command, which will be executed only when you run container 
without specifying a command. If Docker container runs with a command, the default command will be ignored. 
If Dockerfile has more than one CMD instruction, then the last CMD will be executed. It is not possible to
add arguments to docker run if using CMD
Example:CMD "echo" "Hello World!"
->ENTRYPOINT instruction allows you to configure a container that will run as an executable. 
It looks similar to CMD, because it also allows you to specify a command with parameters. 
The difference is ENTRYPOINT command and parameters are not ignored when Docker container runs with command line parameters.
Examplel: ENTRYPOINT ["java", "-jar", "App-name.jar"]

Note:
->Prefer ENTRYPOINT to CMD when building executable Docker image and you need a command always to be executed. 
  Additionally use CMD if you need to provide extra default arguments that could be overwritten from command line when docker container runs.
->Choose CMD if you need to provide a default command and/or arguments that can be overwritten from command line when docker container runs.

=>Docker Volumes:
Docker volumes are used to store any app data or database data or logs.
An app running in a container stores the data inside the container. Suppose if we delete the container then the data is lost
If we want to migrate the data or reuse the data by other app it is not possible so there comes the docker volume

Docker volumes stores the data in the hostmachine and we mount this volume to docker container
such that the app data inside the contianer will be stored in docker volume which is in hostmachine
If we delete the contianer we still have the data in the host machine docker volume
If we want to reuse or migrate data it is possible with docker volume

Docker volume commnads:
->To create a docker volume: docker volume create volume-name
->To List all docker volumes: docker volume ls
->To Delete a docker volume: docker volume rm volume-name
->To inspect a docker volume: docker volume inspect volume-name
->To Delete multiple volumes: docker volume prune

=>To mount a volume to a container:
->docker run --name=mysql -p 8267:3306 -v mysql-db-vol1:/var/lib/mysql -e  MYSQL_ROOT_PASSWORD=root 54150

=>Docker Network:
